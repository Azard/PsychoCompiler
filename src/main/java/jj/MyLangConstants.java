/* Generated By:JavaCC: Do not edit this line. MyLangConstants.java */
package jj;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyLangConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PROGRAM = 7;
  /** RegularExpression Id. */
  int CLASS = 8;
  /** RegularExpression Id. */
  int VAR = 9;
  /** RegularExpression Id. */
  int IS = 10;
  /** RegularExpression Id. */
  int BEGIN = 11;
  /** RegularExpression Id. */
  int END = 12;
  /** RegularExpression Id. */
  int FUNCTION = 13;
  /** RegularExpression Id. */
  int RETURN = 14;
  /** RegularExpression Id. */
  int TYPE = 15;
  /** RegularExpression Id. */
  int BOOLEAN = 16;
  /** RegularExpression Id. */
  int INTEGER = 17;
  /** RegularExpression Id. */
  int ARRAY = 18;
  /** RegularExpression Id. */
  int OF = 19;
  /** RegularExpression Id. */
  int OR = 20;
  /** RegularExpression Id. */
  int AND = 21;
  /** RegularExpression Id. */
  int NOT = 22;
  /** RegularExpression Id. */
  int EXTENDS = 23;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 24;
  /** RegularExpression Id. */
  int REAL_LITERAL = 25;
  /** RegularExpression Id. */
  int DIGIT = 26;
  /** RegularExpression Id. */
  int UNDERSCORE = 27;
  /** RegularExpression Id. */
  int VERTICALVERTICAL = 28;
  /** RegularExpression Id. */
  int ANDAND = 29;
  /** RegularExpression Id. */
  int EQUALEQUAL = 30;
  /** RegularExpression Id. */
  int EXCLAMEQUAL = 31;
  /** RegularExpression Id. */
  int GREATEREQUAL = 32;
  /** RegularExpression Id. */
  int SMALLEREQUAL = 33;
  /** RegularExpression Id. */
  int GREATER = 34;
  /** RegularExpression Id. */
  int SMALLER = 35;
  /** RegularExpression Id. */
  int COLONEQUAL = 36;
  /** RegularExpression Id. */
  int COMMA = 37;
  /** RegularExpression Id. */
  int SEMICOLON = 38;
  /** RegularExpression Id. */
  int COLON = 39;
  /** RegularExpression Id. */
  int LEFTPARENTHESES = 40;
  /** RegularExpression Id. */
  int RIGHTPARENTHESES = 41;
  /** RegularExpression Id. */
  int EQUAL = 42;
  /** RegularExpression Id. */
  int PLUS = 43;
  /** RegularExpression Id. */
  int MINUS = 44;
  /** RegularExpression Id. */
  int TIMES = 45;
  /** RegularExpression Id. */
  int DIVIDE = 46;
  /** RegularExpression Id. */
  int MOD = 47;
  /** RegularExpression Id. */
  int LEFTBRACKET = 48;
  /** RegularExpression Id. */
  int RIGHTBRACKET = 49;
  /** RegularExpression Id. */
  int POINT = 50;
  /** RegularExpression Id. */
  int EXCLAM = 51;
  /** RegularExpression Id. */
  int IDENTIFIER = 52;
  /** RegularExpression Id. */
  int LETTER = 53;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"program\"",
    "\"class\"",
    "\"var\"",
    "\"is\"",
    "\"begin\"",
    "\"end\"",
    "\"function\"",
    "\"return\"",
    "\"type\"",
    "\"boolean\"",
    "\"integer\"",
    "\"array\"",
    "\"of\"",
    "\"or\"",
    "\"and\"",
    "\"not\"",
    "\"extends\"",
    "<INTEGER_LITERAL>",
    "<REAL_LITERAL>",
    "<DIGIT>",
    "\"_\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\":=\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"(\"",
    "\")\"",
    "\"=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"[\"",
    "\"]\"",
    "\".\"",
    "\"!\"",
    "<IDENTIFIER>",
    "<LETTER>",
  };

}
