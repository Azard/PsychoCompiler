/* Generated By:JavaCC: Do not edit this line. MyLang.java */
package jj;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class MyLang implements MyLangConstants {

  public static void main(String args[]) throws ParseException {
      FileInputStream ml_file = null;
      String parent_path = "I:\u005c\u005cJetBrains\u005c\u005cPsychoCompiler\u005c\u005csrc\u005c\u005cmain\u005c\u005cresources\u005c\u005cMyLang_code\u005c\u005c";
      String file_name = "MyLang_simple_1.ml";
      File file = new File(parent_path + file_name);
      if (file.isFile() && file.exists()) {
        System.out.println("find file");
      } else {
        System.out.println("not find file");
      }
      try {
        ml_file = new FileInputStream(file);
      }
      catch (FileNotFoundException e) {
        System.out.print("src file open failed.");
      }
      //MyLang parser = new MyLang(System.in);
      MyLang parser = new MyLang(ml_file);

      System.out.println("Please type the valid statement...");
      System.out.println("input>>");
      try {
        switch (MyLang.Start()){
          case 0:System.out.println("OK.You have typed the correct statements.");
          break ;
          case 1:System.out.println("Goodbye.Thank you for you testing!");
        }
      }
      catch (Exception e){
        System.out.println("Sorry! You have typed the invalid statements.");
        System.out.println(e.getMessage());
        //MyLang.ReInit(System.in);
      }
      catch (Error e){
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  }

  static final public int Start() throws ParseException {
    Program_declaration();
    jj_consume_token(0);
    {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void Program_declaration() throws ParseException {
    Program_head();
    Program_body();
  }

  static final public void Program_head() throws ParseException {
    jj_consume_token(PROGRAM);
    Program_name();
    Program_parameter_list();
  }

  static final public void Program_body() throws ParseException {
    Component_declarations();
    Program_variable_declarations();
    Program_process();
  }

  static final public void Program_name() throws ParseException {
    Identifier();
  }

  static final public void Program_parameter_list() throws ParseException {
    jj_consume_token(LEFTPARENTHESES);
    jj_consume_token(RIGHTPARENTHESES);
  }

  static final public void Program_variable_declarations() throws ParseException {
    jj_consume_token(IS);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VAR:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      Program_variable_declaration();
    }
  }

  static final public void Program_variable_declaration() throws ParseException {
    Variable_declaration();
  }

  static final public void Program_process() throws ParseException {
    jj_consume_token(BEGIN);
    Block();
    jj_consume_token(END);
  }

  static final public void Component_declarations() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  static final public void Variable_declaration() throws ParseException {
    jj_consume_token(VAR);
  }

  static final public void Block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VAR:
      jj_consume_token(VAR);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
  }

  static final public void Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[3];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x100,0x100,};
   }

  /** Constructor with InputStream. */
  public MyLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MyLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MyLang(MyLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MyLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 3; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[28];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 3; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 28; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
