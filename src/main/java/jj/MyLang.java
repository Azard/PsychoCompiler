/* Generated By:JavaCC: Do not edit this line. MyLang.java */
package jj;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class MyLang implements MyLangConstants {

  public static void main(String args[]) throws ParseException {
      FileInputStream ml_file = null;
      String parent_path = "I:\u005c\u005cJetBrains\u005c\u005cPsychoCompiler\u005c\u005csrc\u005c\u005cmain\u005c\u005cresources\u005c\u005cMyLang_code\u005c\u005c";
      String file_name = "MyLang_simple_4.ml";
      File file = new File(parent_path + file_name);
      if (file.isFile() && file.exists()) {
        System.out.println("find file");
      } else {
        System.out.println("not find file");
      }
      try {
        ml_file = new FileInputStream(file);
      }
      catch (FileNotFoundException e) {
        System.out.print("src file open failed.");
      }
      //MyLang parser = new MyLang(System.in);
      MyLang parser = new MyLang(ml_file);

      System.out.println("Please type the valid statement...");
      System.out.println("input>>");
      try {
        switch (MyLang.Start()){
          case 0:System.out.println("OK.You have typed the correct statements.");
          break ;
          case 1:System.out.println("Goodbye.Thank you for you testing!");
        }
      }
      catch (Exception e){
        System.out.println("Sorry! You have typed the invalid statements.");
        System.out.println(e.getMessage());
        //MyLang.ReInit(System.in);
      }
      catch (Error e){
        System.out.println("Oops.");
        System.out.println(e.getMessage());
      }
  }

  static final public int Start() throws ParseException {
    Program_declaration();
    jj_consume_token(0);
    {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void Program_declaration() throws ParseException {
    Program_head();
    Program_body();
  }

  static final public void Program_head() throws ParseException {
    jj_consume_token(PROGRAM);
    Program_name();
    Program_parameter_list();
    Program_parameters_type();
    if (jj_2_1(3)) {
      Program_return_declaration();
    } else {
      ;
    }
  }

  static final public void Program_body() throws ParseException {
    Component_declarations();
    Program_variable_declarations();
    Program_process();
  }

  static final public void Program_name() throws ParseException {
    Identifier();
  }

  static final public void Program_parameter_list() throws ParseException {
    Parameter_list();
  }

  static final public void Program_parameters_type() throws ParseException {
    label_1:
    while (true) {
      if (jj_2_2(3)) {
        ;
      } else {
        break label_1;
      }
      Program_parameter_type();
    }
  }

  static final public void Program_parameter_type() throws ParseException {
    Variable_declaration();
  }

  static final public void Program_return_declaration() throws ParseException {
    jj_consume_token(RETURN);
    Type();
    jj_consume_token(SEMICOLON);
  }

  static final public void Program_variable_declarations() throws ParseException {
    jj_consume_token(IS);
    label_2:
    while (true) {
      if (jj_2_3(3)) {
        ;
      } else {
        break label_2;
      }
      Program_variable_declaration();
    }
  }

  static final public void Program_variable_declaration() throws ParseException {
    Variable_declaration();
  }

  static final public void Program_process() throws ParseException {
    jj_consume_token(BEGIN);
    Block();
    jj_consume_token(END);
  }

  static final public void Component_declarations() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_4(3)) {
        ;
      } else {
        break label_3;
      }
      Component_declaration();
    }
  }

  static final public void Component_declaration() throws ParseException {
    if (jj_2_5(3)) {
      Function_declaration();
    } else if (jj_2_6(3)) {
      Type_and_class_declaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Type_and_class_declaration() throws ParseException {
    jj_consume_token(TYPE);
    Identifier();
    jj_consume_token(IS);
    if (jj_2_7(3)) {
      Type_declaration();
    } else if (jj_2_8(3)) {
      Class_declaration();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Function_declaration() throws ParseException {
    Function_head();
    Function_body();
  }

  static final public void Function_head() throws ParseException {
    jj_consume_token(FUNCTION);
    Function_name();
    Function_parameter_list();
    Function_parameters_type();
    if (jj_2_9(3)) {
      Function_return_declaration();
    } else {
      ;
    }
  }

  static final public void Function_body() throws ParseException {
    Function_variable_declarations();
    Function_process();
  }

  static final public void Function_name() throws ParseException {
    Identifier();
  }

  static final public void Function_parameter_list() throws ParseException {
    Parameter_list();
  }

  static final public void Function_parameters_type() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_10(3)) {
        ;
      } else {
        break label_4;
      }
      Function_parameter_type();
    }
  }

  static final public void Function_parameter_type() throws ParseException {
    Variable_declaration();
  }

  static final public void Function_return_declaration() throws ParseException {
    jj_consume_token(RETURN);
    Type();
    jj_consume_token(SEMICOLON);
  }

  static final public void Function_variable_declarations() throws ParseException {
    jj_consume_token(IS);
    label_5:
    while (true) {
      if (jj_2_11(3)) {
        ;
      } else {
        break label_5;
      }
      Function_variable_declaration();
    }
  }

  static final public void Function_variable_declaration() throws ParseException {
    Variable_declaration();
  }

  static final public void Function_process() throws ParseException {
    jj_consume_token(BEGIN);
    Block();
    jj_consume_token(END);
    jj_consume_token(FUNCTION);
    Function_name();
    jj_consume_token(SEMICOLON);
  }

  static final public void Variable_declaration() throws ParseException {
    jj_consume_token(VAR);
    Identifier();
    jj_consume_token(IS);
    Type();
    jj_consume_token(SEMICOLON);
  }

  static final public void Parameter_list() throws ParseException {
    jj_consume_token(LEFTPARENTHESES);
    if (jj_2_12(3)) {
      Parameters();
    } else {
      ;
    }
    jj_consume_token(RIGHTPARENTHESES);
  }

  static final public void Parameters() throws ParseException {
    Parameter();
    label_6:
    while (true) {
      if (jj_2_13(3)) {
        ;
      } else {
        break label_6;
      }
      jj_consume_token(COMMA);
      Parameter();
    }
  }

  static final public void Parameter() throws ParseException {
    Identifier();
  }

  static final public void Type_declaration() throws ParseException {
    jj_consume_token(ARRAY);
    jj_consume_token(OF);
    jj_consume_token(INTEGER_LITERAL);
    Type();
    jj_consume_token(SEMICOLON);
  }

  static final public void Class_declaration() throws ParseException {
    Class_head();
    Class_body();
    Class_tail();
  }

  static final public void Class_head() throws ParseException {
    jj_consume_token(CLASS);
    if (jj_2_14(3)) {
      Class_extend();
    } else {
      ;
    }
  }

  static final public void Class_body() throws ParseException {
    Class_variable_declarations();
    Class_function_declarations();
  }

  static final public void Class_tail() throws ParseException {
    jj_consume_token(END);
    jj_consume_token(CLASS);
    jj_consume_token(SEMICOLON);
  }

  static final public void Class_name() throws ParseException {
    Identifier();
  }

  static final public void Class_extend() throws ParseException {
    jj_consume_token(EXTENDS);
    Class_type();
  }

  static final public void Class_variable_declarations() throws ParseException {
    label_7:
    while (true) {
      if (jj_2_15(3)) {
        ;
      } else {
        break label_7;
      }
      Class_variable_declaration();
    }
  }

  static final public void Class_variable_declaration() throws ParseException {
    Variable_declaration();
  }

  static final public void Class_function_declarations() throws ParseException {
    label_8:
    while (true) {
      if (jj_2_16(3)) {
        ;
      } else {
        break label_8;
      }
      Class_function_declaration();
    }
  }

  static final public void Class_function_declaration() throws ParseException {
    Function_declaration();
  }

  static final public void Type() throws ParseException {
    if (jj_2_17(3)) {
      Primitive_type();
    } else if (jj_2_18(3)) {
      Reference_type();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Primitive_type() throws ParseException {
    if (jj_2_19(3)) {
      Numeric_type();
    } else if (jj_2_20(3)) {
      jj_consume_token(BOOLEAN);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Numeric_type() throws ParseException {
    Integral_type();
  }

  static final public void Integral_type() throws ParseException {
    jj_consume_token(INTEGER);
  }

  static final public void Reference_type() throws ParseException {
    Class_type();
  }

  static final public void Class_type() throws ParseException {
    Type_name();
  }

  static final public void Type_name() throws ParseException {
    Identifier();
  }

  static final public void Block() throws ParseException {
    label_9:
    while (true) {
      if (jj_2_21(3)) {
        ;
      } else {
        break label_9;
      }
      Block_statement();
    }
  }

  static final public void Block_statement() throws ParseException {
    Statement();
  }

  static final public void Statement() throws ParseException {
    if (jj_2_22(3)) {
      Statement_without_substatement();
    } else if (jj_2_23(3)) {
      If_statement();
    } else if (jj_2_24(3)) {
      While_statement();
    } else if (jj_2_25(3)) {
      Repeat_statement();
    } else if (jj_2_26(3)) {
      Foreach_statement();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Statement_without_substatement() throws ParseException {
    if (jj_2_27(3)) {
      Empty_statement();
    } else if (jj_2_28(3)) {
      Return_statement();
    } else if (jj_2_29(3)) {
      Print_statement();
    } else if (jj_2_30(3)) {
      Function_statement();
    } else if (jj_2_31(3)) {
      Assignment_expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Empty_statement() throws ParseException {
    jj_consume_token(SEMICOLON);
  }

  static final public void Return_statement() throws ParseException {
    jj_consume_token(RETURN);
    if (jj_2_32(3)) {
      Expression();
    } else if (jj_2_33(3)) {
      Logical_expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void Print_statement() throws ParseException {
    jj_consume_token(PRINT);
    Expression();
    jj_consume_token(SEMICOLON);
  }

  static final public void Function_statement() throws ParseException {
    Function_call_expression();
    jj_consume_token(SEMICOLON);
  }

  static final public void If_statement() throws ParseException {
    jj_consume_token(IF);
    Logical_expression();
    jj_consume_token(THEN);
    Block();
    label_10:
    while (true) {
      if (jj_2_34(3)) {
        ;
      } else {
        break label_10;
      }
      Elif_statement();
    }
    if (jj_2_35(3)) {
      Else_statement();
    } else {
      ;
    }
    jj_consume_token(END);
    jj_consume_token(IF);
  }

  static final public void Elif_statement() throws ParseException {
    jj_consume_token(ELIF);
    Logical_expression();
    jj_consume_token(THEN);
    Block();
  }

  static final public void Else_statement() throws ParseException {
    jj_consume_token(ELSE);
    Block();
  }

  static final public void While_statement() throws ParseException {
    jj_consume_token(WHILE);
    Logical_expression();
    jj_consume_token(DO);
    Block();
    jj_consume_token(END);
    jj_consume_token(WHILE);
  }

  static final public void Repeat_statement() throws ParseException {
    jj_consume_token(REPEAT);
    Block();
    jj_consume_token(UNTIL);
    Logical_expression();
    jj_consume_token(SEMICOLON);
  }

  static final public void Foreach_statement() throws ParseException {
    jj_consume_token(FOREACH);
    Identifier();
    jj_consume_token(IN);
    Identifier();
    jj_consume_token(DO);
    Block();
    jj_consume_token(END);
    jj_consume_token(FOREACH);
  }

  static final public void Expression() throws ParseException {
    Arithmetic_expression();
  }

  static final public void Arithmetic_expression() throws ParseException {
    Additive_expression();
  }

  static final public void Additive_expression() throws ParseException {
    Multiplicative_expression();
    label_11:
    while (true) {
      if (jj_2_36(3)) {
        ;
      } else {
        break label_11;
      }
      Additive_operator();
      Multiplicative_expression();
    }
  }

  static final public void Multiplicative_expression() throws ParseException {
    Unary_expression();
    label_12:
    while (true) {
      if (jj_2_37(3)) {
        ;
      } else {
        break label_12;
      }
      Multiplicative_operator();
      Unary_expression();
    }
  }

  static final public void Unary_expression() throws ParseException {
    if (jj_2_38(3)) {
      Constant_expression();
    } else if (jj_2_39(3)) {
      Function_call_expression();
    } else if (jj_2_40(3)) {
      Class_function_or_member();
    } else if (jj_2_41(3)) {
      Left_value();
    } else if (jj_2_42(3)) {
      jj_consume_token(LEFTPARENTHESES);
      Arithmetic_expression();
      jj_consume_token(RIGHTPARENTHESES);
    } else if (jj_2_43(3)) {
      Sign();
      Unary_expression();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Logical_expression() throws ParseException {
    Or_expression();
  }

  static final public void Or_expression() throws ParseException {
    And_expression();
    label_13:
    while (true) {
      if (jj_2_44(3)) {
        ;
      } else {
        break label_13;
      }
      Or_operator();
      And_expression();
    }
  }

  static final public void And_expression() throws ParseException {
    Unary_logical_expression();
    label_14:
    while (true) {
      if (jj_2_45(3)) {
        ;
      } else {
        break label_14;
      }
      And_operator();
      Unary_logical_expression();
    }
  }

  static final public void Unary_logical_expression() throws ParseException {
    if (jj_2_46(3)) {
      Function_call_expression();
    } else if (jj_2_47(3)) {
      Relation_expression();
    } else if (jj_2_48(3)) {
      jj_consume_token(LEFTPARENTHESES);
      Unary_logical_expression();
      jj_consume_token(RIGHTPARENTHESES);
    } else if (jj_2_49(3)) {
      Unary_logical_operator();
      Unary_logical_expression();
    } else if (jj_2_50(3)) {
      Default_logical_value();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Relation_expression() throws ParseException {
    Expression();
    Relation_operator();
    Expression();
  }

  static final public void Assignment_expression() throws ParseException {
    Left_value();
    jj_consume_token(COLONEQUAL);
    Expression();
    jj_consume_token(SEMICOLON);
  }

  static final public void Left_value() throws ParseException {
    Identifier();
    label_15:
    while (true) {
      if (jj_2_51(3)) {
        ;
      } else {
        break label_15;
      }
      if (jj_2_52(3)) {
        Array_access_expression();
      } else if (jj_2_53(3)) {
        Class_member_expression();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void Constant_expression() throws ParseException {
    if (jj_2_54(3)) {
      Sign();
    } else {
      ;
    }
    Digits();
  }

  static final public void Array_access_expression() throws ParseException {
    jj_consume_token(LEFTBRACKET);
    Arithmetic_expression();
    jj_consume_token(RIGHTBRACKET);
  }

  static final public void Class_member_expression() throws ParseException {
    jj_consume_token(POINT);
    Identifier();
    label_16:
    while (true) {
      if (jj_2_55(3)) {
        ;
      } else {
        break label_16;
      }
      jj_consume_token(POINT);
      Identifier();
    }
  }

  static final public void Function_call_expression() throws ParseException {
    Function_name();
    Function_call_parameter_list();
  }

  static final public void Function_call_parameter_list() throws ParseException {
    jj_consume_token(LEFTPARENTHESES);
    if (jj_2_57(3)) {
      Call_parameter();
      label_17:
      while (true) {
        if (jj_2_56(3)) {
          ;
        } else {
          break label_17;
        }
        jj_consume_token(COMMA);
        Call_parameter();
      }
    } else {
      ;
    }
    jj_consume_token(RIGHTPARENTHESES);
  }

  static final public void Call_parameter() throws ParseException {
    Expression();
  }

  static final public void Class_function_or_member() throws ParseException {
    Class_name();
    jj_consume_token(POINT);
    label_18:
    while (true) {
      if (jj_2_58(3)) {
        ;
      } else {
        break label_18;
      }
      Class_name();
      jj_consume_token(POINT);
    }
    Identifier();
    if (jj_2_59(3)) {
      Function_call_parameter_list();
    } else {
      ;
    }
  }

  static final public void Additive_operator() throws ParseException {
    if (jj_2_60(3)) {
      jj_consume_token(PLUS);
    } else if (jj_2_61(3)) {
      jj_consume_token(MINUS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Multiplicative_operator() throws ParseException {
    if (jj_2_62(3)) {
      jj_consume_token(TIMES);
    } else if (jj_2_63(3)) {
      jj_consume_token(DIVIDE);
    } else if (jj_2_64(3)) {
      jj_consume_token(MOD);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Relation_operator() throws ParseException {
    if (jj_2_65(3)) {
      jj_consume_token(EQUALEQUAL);
    } else if (jj_2_66(3)) {
      jj_consume_token(EXCLAMEQUAL);
    } else if (jj_2_67(3)) {
      jj_consume_token(GREATER);
    } else if (jj_2_68(3)) {
      jj_consume_token(GREATEREQUAL);
    } else if (jj_2_69(3)) {
      jj_consume_token(SMALLER);
    } else if (jj_2_70(3)) {
      jj_consume_token(SMALLEREQUAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Or_operator() throws ParseException {
    if (jj_2_71(3)) {
      jj_consume_token(OR);
    } else if (jj_2_72(3)) {
      jj_consume_token(VERTICALVERTICAL);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void And_operator() throws ParseException {
    if (jj_2_73(3)) {
      jj_consume_token(AND);
    } else if (jj_2_74(3)) {
      jj_consume_token(ANDAND);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Unary_logical_operator() throws ParseException {
    if (jj_2_75(3)) {
      jj_consume_token(NOT);
    } else if (jj_2_76(3)) {
      jj_consume_token(EXCLAM);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Sign() throws ParseException {
    if (jj_2_77(3)) {
      jj_consume_token(PLUS);
    } else if (jj_2_78(3)) {
      jj_consume_token(MINUS);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Digits() throws ParseException {
    jj_consume_token(INTEGER_LITERAL);
  }

  static final public void Default_logical_value() throws ParseException {
    if (jj_2_79(3)) {
      jj_consume_token(YES);
    } else if (jj_2_80(3)) {
      jj_consume_token(NO);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Identifier() throws ParseException {
    jj_consume_token(IDENTIFIER);
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  static private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  static private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  static private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  static private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  static private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  static private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  static private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  static private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  static private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  static private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  static private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  static private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  static private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  static private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  static private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  static private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  static private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  static private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  static private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  static private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  static private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  static private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  static private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  static private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  static private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  static private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  static private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  static private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  static private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  static private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  static private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  static private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  static private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  static private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(17)) return true;
    return false;
  }

  static private boolean jj_3R_34() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) return true;
    }
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_3R_34()) return true;
    return false;
  }

  static private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) return true;
    }
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_33()) return true;
    return false;
  }

  static private boolean jj_3R_83() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_32()) return true;
    return false;
  }

  static private boolean jj_3R_82() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_31() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_3R_27()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_31()) return true;
    return false;
  }

  static private boolean jj_3R_75() {
    if (jj_scan_token(END)) return true;
    if (jj_scan_token(CLASS)) return true;
    return false;
  }

  static private boolean jj_3R_74() {
    if (jj_3R_82()) return true;
    if (jj_3R_83()) return true;
    return false;
  }

  static private boolean jj_3R_73() {
    if (jj_scan_token(CLASS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_14()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_3R_30()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_73()) return true;
    if (jj_3R_74()) return true;
    if (jj_3R_75()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(ARRAY)) return true;
    if (jj_scan_token(OF)) return true;
    if (jj_scan_token(INTEGER_LITERAL)) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(64)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_84() {
    if (jj_scan_token(LEFTPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3R_71() {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_81() {
    if (jj_3R_84()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_72() {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_3R_81()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_72()) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(TYPE)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(IS)) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) return true;
    }
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_59() {
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_3R_70()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_80() {
    if (jj_scan_token(NO)) return true;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_71()) return true;
    return false;
  }

  static private boolean jj_3_79() {
    if (jj_scan_token(YES)) return true;
    return false;
  }

  static private boolean jj_3R_65() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) return true;
    }
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_78() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_77() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_77()) {
    jj_scanpos = xsp;
    if (jj_3_78()) return true;
    }
    return false;
  }

  static private boolean jj_3_76() {
    if (jj_scan_token(EXCLAM)) return true;
    return false;
  }

  static private boolean jj_3_75() {
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  static private boolean jj_3R_64() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) return true;
    }
    return false;
  }

  static private boolean jj_3_74() {
    if (jj_scan_token(ANDAND)) return true;
    return false;
  }

  static private boolean jj_3_73() {
    if (jj_scan_token(AND)) return true;
    return false;
  }

  static private boolean jj_3R_61() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_73()) {
    jj_scanpos = xsp;
    if (jj_3_74()) return true;
    }
    return false;
  }

  static private boolean jj_3_56() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  static private boolean jj_3_72() {
    if (jj_scan_token(VERTICALVERTICAL)) return true;
    return false;
  }

  static private boolean jj_3_71() {
    if (jj_scan_token(OR)) return true;
    return false;
  }

  static private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_71()) {
    jj_scanpos = xsp;
    if (jj_3_72()) return true;
    }
    return false;
  }

  static private boolean jj_3_70() {
    if (jj_scan_token(SMALLEREQUAL)) return true;
    return false;
  }

  static private boolean jj_3_69() {
    if (jj_scan_token(SMALLER)) return true;
    return false;
  }

  static private boolean jj_3_58() {
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(POINT)) return true;
    return false;
  }

  static private boolean jj_3_68() {
    if (jj_scan_token(GREATEREQUAL)) return true;
    return false;
  }

  static private boolean jj_3_67() {
    if (jj_scan_token(GREATER)) return true;
    return false;
  }

  static private boolean jj_3_66() {
    if (jj_scan_token(EXCLAMEQUAL)) return true;
    return false;
  }

  static private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    if (jj_3_67()) {
    jj_scanpos = xsp;
    if (jj_3_68()) {
    jj_scanpos = xsp;
    if (jj_3_69()) {
    jj_scanpos = xsp;
    if (jj_3_70()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_65() {
    if (jj_scan_token(EQUALEQUAL)) return true;
    return false;
  }

  static private boolean jj_3_64() {
    if (jj_scan_token(MOD)) return true;
    return false;
  }

  static private boolean jj_3_63() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3_57() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_56()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_62() {
    if (jj_scan_token(TIMES)) return true;
    return false;
  }

  static private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_61() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3_60() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3_61()) return true;
    }
    return false;
  }

  static private boolean jj_3_55() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3R_55() {
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(POINT)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_58()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(64)) return true;
    return false;
  }

  static private boolean jj_3_53() {
    if (jj_3R_67()) return true;
    return false;
  }

  static private boolean jj_3R_68() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_69() {
    if (jj_scan_token(LEFTPARENTHESES)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_57()) jj_scanpos = xsp;
    if (jj_scan_token(RIGHTPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3R_54() {
    if (jj_scan_token(64)) return true;
    if (jj_3R_69()) return true;
    return false;
  }

  static private boolean jj_3R_67() {
    if (jj_scan_token(POINT)) return true;
    if (jj_scan_token(64)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_66() {
    if (jj_scan_token(LEFTBRACKET)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RIGHTBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_61()) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3_54() {
    if (jj_3R_58()) return true;
    return false;
  }

  static private boolean jj_3R_53() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) jj_scanpos = xsp;
    if (jj_scan_token(37)) return true;
    return false;
  }

  static private boolean jj_3_52() {
    if (jj_3R_66()) return true;
    return false;
  }

  static private boolean jj_3_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) return true;
    }
    return false;
  }

  static private boolean jj_3R_56() {
    if (jj_scan_token(64)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_51()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_44() {
    if (jj_3R_56()) return true;
    if (jj_scan_token(COLONEQUAL)) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_3R_59()) return true;
    if (jj_3R_60()) return true;
    return false;
  }

  static private boolean jj_3R_63() {
    if (jj_3R_45()) return true;
    if (jj_3R_80()) return true;
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3_50() {
    if (jj_3R_65()) return true;
    return false;
  }

  static private boolean jj_3_49() {
    if (jj_3R_64()) return true;
    if (jj_3R_62()) return true;
    return false;
  }

  static private boolean jj_3_48() {
    if (jj_scan_token(LEFTPARENTHESES)) return true;
    if (jj_3R_62()) return true;
    if (jj_scan_token(RIGHTPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3_47() {
    if (jj_3R_63()) return true;
    return false;
  }

  static private boolean jj_3_46() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_3R_49()) return true;
    if (jj_3R_50()) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_3R_48()) return true;
    return false;
  }

  static private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) {
    jj_scanpos = xsp;
    if (jj_3_48()) {
    jj_scanpos = xsp;
    if (jj_3_49()) {
    jj_scanpos = xsp;
    if (jj_3_50()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_60() {
    if (jj_3R_62()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_3R_51()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3R_78() {
    if (jj_3R_60()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_46() {
    if (jj_3R_78()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_3R_58()) return true;
    if (jj_3R_52()) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(LEFTPARENTHESES)) return true;
    if (jj_3R_57()) return true;
    if (jj_scan_token(RIGHTPARENTHESES)) return true;
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_56()) return true;
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_3R_55()) return true;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_3R_47()) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_3R_53()) return true;
    return false;
  }

  static private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_50() {
    if (jj_3R_52()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_79() {
    if (jj_3R_50()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_57() {
    if (jj_3R_79()) return true;
    return false;
  }

  static private boolean jj_3R_45() {
    if (jj_3R_57()) return true;
    return false;
  }

  static private boolean jj_3R_40() {
    if (jj_scan_token(FOREACH)) return true;
    if (jj_scan_token(64)) return true;
    if (jj_scan_token(IN)) return true;
    return false;
  }

  static private boolean jj_3R_39() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_3R_77()) return true;
    if (jj_scan_token(UNTIL)) return true;
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_3R_46()) return true;
    return false;
  }

  static private boolean jj_3R_38() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(DO)) return true;
    return false;
  }

  static private boolean jj_3R_48() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_77()) return true;
    return false;
  }

  static private boolean jj_3R_47() {
    if (jj_scan_token(ELIF)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  static private boolean jj_3R_37() {
    if (jj_scan_token(IF)) return true;
    if (jj_3R_46()) return true;
    if (jj_scan_token(THEN)) return true;
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_3R_45()) return true;
    return false;
  }

  static private boolean jj_3R_43() {
    if (jj_3R_54()) return true;
    return false;
  }

  static private boolean jj_3R_42() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_3R_45()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3R_41() {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) return true;
    }
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  static private boolean jj_3_31() {
    if (jj_3R_44()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_3R_43()) return true;
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_3R_42()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    if (jj_3R_41()) return true;
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(50)) return true;
    return false;
  }

  static private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_3R_40()) return true;
    return false;
  }

  static private boolean jj_3_25() {
    if (jj_3R_39()) return true;
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_3R_38()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_3R_37()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_36()) return true;
    return false;
  }

  static private boolean jj_3R_76() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_22()) {
    jj_scanpos = xsp;
    if (jj_3_23()) {
    jj_scanpos = xsp;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_3R_76()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_35()) return true;
    return false;
  }

  static private boolean jj_3R_77() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MyLangTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[80];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MyLang(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MyLang(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MyLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MyLang(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MyLangTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MyLang(MyLangTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MyLangTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[66];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 66; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 80; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
